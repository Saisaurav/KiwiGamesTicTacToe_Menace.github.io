import random
Boards_move1, Boards_move3, Boards_move5, Boards_move7 = (
{
    (0, 0, 0, 0, 0, 0, 0, 0, 0): [8, 8, 8, 8, 8, 8, 8, 8, 8]
},
{
    (0, -1, 0, 0, 1, 0, 0, 0, 0): [4, 0, 4, 4, 0, 4, 4, 4, 4],
    (-1, 0, 0, 0, 1, 0, 0, 0, 0): [0, 4, 4, 4, 0, 4, 4, 4, 4],
    (-1, 0, 0, 0, 0, 0, 0, 0, 1): [0, 4, 4, 4, 4, 4, 4, 4, 0],
    (-1, 0, 0, 0, 0, 0, 0, 1, 0): [0, 4, 4, 4, 4, 4, 4, 0, 4],
    (-1, 0, 0, 0, 0, 0, 1, 0, 0): [0, 4, 4, 4, 4, 4, 0, 4, 4],
    (0, -1, 1, 0, 0, 0, 0, 0, 0): [4, 0, 0, 4, 4, 4, 4, 4, 4],
    (0, -1, 0, 0, 0, 1, 0, 0, 0): [4, 0, 4, 4, 4, 0, 4, 4, 4],
    (0, 0, 0, 0, -1, 0, 0, 1, 0): [4, 4, 4, 4, 0, 4, 4, 0, 4],
    (0, -1, 0, 0, 0, 0, 0, 1, 0): [4, 0, 4, 4, 4, 4, 4, 0, 4],
    (-1, 0, 0, 1, 0, 0, 0, 0, 0): [0, 4, 4, 0, 4, 4, 4, 4, 4],
    (0, 0, 0, 0, -1, 0, 0, 0, 1): [4, 4, 4, 4, 0, 4, 4, 4, 0],
    (0, -1, 0, 0, 0, 0, 0, 0, 1): [4, 0, 4, 4, 4, 4, 4, 4, 0],
},
{
    (0, -1, 0, -1, 1, 0, 1, 0, 0): [2, 0, 2, 0, 0, 2, 0, 2, 2],
    (-1, 0, 1, 0, 0, 0, 1, 0, -1): [0, 2, 0, 2, 2, 2, 0, 2, 0],       
    (-1, 0, -1, 1, 0, 1, 0, 0, 0): [0, 2, 0, 0, 2, 0, 2, 2, 2],       
    (-1, -1, 1, 0, 0, 1, 0, 0, 0): [0, 0, 0, 2, 2, 0, 2, 2, 2],       
    (-1, 0, 0, 0, -1, 0, 1, 0, 1): [0, 2, 2, 2, 0, 2, 0, 2, 0],       
    (0, -1, 0, 0, 0, 0, 1, -1, 1): [2, 0, 2, 2, 2, 2, 0, 0, 0],       
    (-1, 0, 0, 0, 1, -1, 0, 0, 1): [0, 2, 2, 2, 0, 0, 2, 2, 0],       
    (-1, 0, 0, 0, 1, -1, 0, 1, 0): [0, 2, 2, 2, 0, 0, 2, 0, 2],       
    (-1, -1, 0, 1, 0, 0, 0, 1, 0): [0, 0, 2, 0, 2, 2, 2, 0, 2],       
    (-1, 0, 0, 0, 0, 1, 1, 0, -1): [0, 2, 2, 2, 2, 0, 0, 2, 0],       
    (-1, 0, 0, 0, 1, 0, 1, 0, -1): [0, 2, 2, 2, 0, 2, 0, 2, 0],       
    (0, -1, 0, 0, 1, 1, 0, -1, 0): [2, 0, 2, 2, 0, 0, 2, 0, 2],       
    (-1, 0, -1, 0, 0, 1, 1, 0, 0): [0, 2, 0, 2, 2, 0, 0, 2, 2],       
    (-1, -1, 0, 0, 0, 0, 1, 1, 0): [0, 0, 2, 2, 2, 2, 0, 0, 2],       
    (-1, 0, 0, 0, 1, -1, 1, 0, 0): [0, 2, 2, 2, 0, 0, 0, 2, 2],       
    (-1, 0, 0, 0, 1, 0, 1, -1, 0): [0, 2, 2, 2, 0, 2, 0, 0, 2],       
    (-1, 0, 0, 1, 0, 0, 0, 1, -1): [0, 2, 2, 0, 2, 2, 2, 0, 0],       
    (-1, -1, 0, 0, 1, 1, 0, 0, 0): [0, 0, 2, 2, 0, 0, 2, 2, 2],       
    (-1, -1, 1, 0, 1, 0, 0, 0, 0): [0, 0, 0, 2, 0, 2, 2, 2, 2],       
    (-1, 0, 0, 1, 0, -1, 0, 1, 0): [0, 2, 2, 0, 2, 0, 2, 0, 2],       
    (-1, 0, 0, 0, 0, -1, 1, 0, 1): [0, 2, 2, 2, 2, 0, 0, 2, 0],       
    (0, -1, 0, 0, -1, 0, 0, 1, 1): [2, 0, 2, 2, 0, 2, 2, 0, 0],       
    (0, -1, 1, 1, -1, 0, 0, 0, 0): [2, 0, 0, 0, 0, 2, 2, 2, 2],       
    (-1, 0, 0, 1, 0, 1, 0, 0, -1): [0, 2, 2, 0, 2, 0, 2, 2, 0],       
    (-1, -1, 1, 0, 0, 0, 0, 0, 1): [0, 0, 0, 2, 2, 2, 2, 2, 0],       
    (0, -1, 1, 0, 0, -1, 1, 0, 0): [2, 0, 0, 2, 2, 0, 0, 2, 2],       
    (-1, -1, 0, 0, 0, 0, 0, 1, 1): [0, 0, 2, 2, 2, 2, 2, 0, 0],       
    (-1, 1, 0, 1, -1, 0, 0, 0, 0): [0, 0, 2, 0, 0, 2, 2, 2, 2],       
    (0, -1, 0, 0, -1, 1, 0, 1, 0): [2, 0, 2, 2, 0, 0, 2, 0, 2],       
    (-1, 0, 0, 1, 0, 1, 0, -1, 0): [0, 2, 2, 0, 2, 0, 2, 0, 2],       
    (-1, 0, 1, 1, -1, 0, 0, 0, 0): [0, 2, 0, 0, 0, 2, 2, 2, 2],       
    (0, -1, 1, 0, 0, -1, 0, 1, 0): [2, 0, 0, 2, 2, 0, 2, 0, 2],       
    (0, -1, 0, -1, 0, 1, 0, 1, 0): [2, 0, 2, 0, 2, 0, 2, 0, 2],       
    (0, -1, 0, 0, -1, 1, 1, 0, 0): [2, 0, 2, 2, 0, 0, 0, 2, 2],       
    (0, 0, 0, 0, -1, 0, 1, -1, 1): [2, 2, 2, 2, 0, 2, 0, 0, 0],       
    (0, -1, 0, 0, 0, 1, 0, -1, 1): [2, 0, 2, 2, 2, 0, 2, 0, 0],       
    (-1, -1, 0, 0, 0, 1, 1, 0, 0): [0, 0, 2, 2, 2, 0, 0, 2, 2],       
    (-1, 0, 0, 1, 0, 0, -1, 0, 1): [0, 2, 2, 0, 2, 2, 0, 2, 0],       
    (-1, 0, 0, 1, 0, 0, -1, 1, 0): [0, 2, 2, 0, 2, 2, 0, 0, 2],       
    (-1, 0, 0, 1, 1, 0, 0, -1, 0): [0, 2, 2, 0, 0, 2, 2, 0, 2],       
    (0, -1, 1, 0, 0, 0, 0, -1, 1): [2, 0, 0, 2, 2, 2, 2, 0, 0],       
    (-1, -1, 0, 1, 0, 1, 0, 0, 0): [0, 0, 2, 0, 2, 0, 2, 2, 2],       
    (0, -1, 1, -1, 0, 0, 1, 0, 0): [2, 0, 0, 0, 2, 2, 0, 2, 2],       
    (-1, 1, 0, 1, 0, -1, 0, 0, 0): [0, 0, 2, 0, 2, 0, 2, 2, 2],       
    (-1, 0, 0, 0, 0, 0, 1, 1, -1): [0, 2, 2, 2, 2, 2, 0, 0, 0],       
    (0, -1, 1, 0, -1, 0, 0, 0, 1): [2, 0, 0, 2, 0, 2, 2, 2, 0],       
    (-1, -1, 0, 1, 0, 0, 0, 0, 1): [0, 0, 2, 0, 2, 2, 2, 2, 0],       
    (-1, 0, 0, 0, 0, 1, 1, -1, 0): [0, 2, 2, 2, 2, 0, 0, 0, 2],       
    (-1, 0, 0, 0, 0, -1, 1, 1, 0): [0, 2, 2, 2, 2, 0, 0, 0, 2],       
    (-1, 0, 1, 0, -1, 0, 1, 0, 0): [0, 2, 0, 2, 0, 2, 0, 2, 2],       
    (0, -1, 0, -1, 0, 0, 0, 1, 1): [2, 0, 2, 0, 2, 2, 2, 0, 0],       
    (-1, 0, -1, 0, 1, 0, 0, 1, 0): [0, 2, 0, 2, 0, 2, 2, 0, 2],       
    (0, -1, 0, 1, -1, 1, 0, 0, 0): [2, 0, 2, 0, 0, 0, 2, 2, 2],       
    (-1, 0, -1, 0, 0, 0, 1, 0, 1): [0, 2, 0, 2, 2, 2, 0, 2, 0],       
    (-1, 0, 0, 1, 0, 0, 0, -1, 1): [0, 2, 2, 0, 2, 2, 2, 0, 0],       
    (0, -1, 0, -1, 0, 0, 1, 1, 0): [2, 0, 2, 0, 2, 2, 0, 0, 2],       
    (-1, 0, -1, 0, 1, 0, 0, 0, 1): [0, 2, 0, 2, 0, 2, 2, 2, 0],       
    (-1, -1, 0, 1, 0, 0, 1, 0, 0): [0, 0, 2, 0, 2, 2, 0, 2, 2],       
    (0, -1, 1, 0, -1, 0, 1, 0, 0): [2, 0, 0, 2, 0, 2, 0, 2, 2],       
    (0, -1, 1, 0, 1, -1, 0, 0, 0): [2, 0, 0, 2, 0, 0, 2, 2, 2],       
    (-1, -1, 0, 0, 0, 1, 0, 0, 1): [0, 0, 2, 2, 2, 0, 2, 2, 0],       
    (-1, -1, 0, 0, 0, 1, 0, 1, 0): [0, 0, 2, 2, 2, 0, 2, 0, 2],       
    (-1, 0, 0, 0, 0, 1, 0, 1, -1): [0, 2, 2, 2, 2, 0, 2, 0, 0],       
    (-1, 0, 0, 0, 1, 0, 0, 1, -1): [0, 2, 2, 2, 0, 2, 2, 0, 0],       
    (-1, -1, 0, 1, 1, 0, 0, 0, 0): [0, 0, 2, 0, 0, 2, 2, 2, 2],       
    (-1, 0, 1, 1, 0, -1, 0, 0, 0): [0, 2, 0, 0, 2, 0, 2, 2, 2],       
    (0, -1, 1, 0, 0, 0, 1, -1, 0): [2, 0, 0, 2, 2, 2, 0, 0, 2],       
    (0, -1, 1, 0, -1, 0, 0, 1, 0): [2, 0, 0, 2, 0, 2, 2, 0, 2],       
    (0, -1, 0, -1, 1, 0, 0, 0, 1): [2, 0, 2, 0, 0, 2, 2, 2, 0],       
    (0, -1, 0, 0, -1, 0, 1, 0, 1): [2, 0, 2, 2, 0, 2, 0, 2, 0],       
    (-1, 0, 0, 0, -1, 1, 0, 1, 0): [0, 2, 2, 2, 0, 0, 2, 0, 2],       
    (-1, 0, 0, 1, 0, 1, -1, 0, 0): [0, 2, 2, 0, 2, 0, 0, 2, 2],       
    (-1, -1, 0, 0, 1, 0, 0, 1, 0): [0, 0, 2, 2, 0, 2, 2, 0, 2],       
    (-1, 0, 0, 0, -1, 0, 0, 1, 1): [0, 2, 2, 2, 0, 2, 2, 0, 0],       
    (-1, 0, 1, 0, 0, -1, 1, 0, 0): [0, 2, 0, 2, 2, 0, 0, 2, 2],       
    (0, -1, 0, 0, 0, 1, 1, -1, 0): [2, 0, 2, 2, 2, 0, 0, 0, 2],       
    (-1, -1, 0, 0, 0, 0, 1, 0, 1): [0, 0, 2, 2, 2, 2, 0, 2, 0],       
    (-1, -1, 1, 0, 0, 0, 0, 1, 0): [0, 0, 0, 2, 2, 2, 2, 0, 2],       
    (-1, -1, 0, 0, 1, 0, 0, 0, 1): [0, 0, 2, 2, 0, 2, 2, 2, 0],       
    (0, -1, 1, 0, -1, 1, 0, 0, 0): [2, 0, 0, 2, 0, 0, 2, 2, 2],       
    (-1, -1, 1, 0, 0, 0, 1, 0, 0): [0, 0, 0, 2, 2, 2, 0, 2, 2],       
    (-1, 0, 0, 1, 1, 0, -1, 0, 0): [0, 2, 2, 0, 0, 2, 0, 2, 2],       
    (-1, 0, -1, 0, 0, 0, 0, 1, 1): [0, 2, 0, 2, 2, 2, 2, 0, 0],       
    (-1, 0, 0, 1, -1, 0, 0, 0, 1): [0, 2, 2, 0, 0, 2, 2, 2, 0],       
    (-1, 0, 0, 0, 0, -1, 0, 1, 1): [0, 2, 2, 2, 2, 0, 2, 0, 0],       
    (-1, 0, 0, 0, -1, 0, 1, 1, 0): [0, 2, 2, 2, 0, 2, 0, 0, 2],       
    (-1, 0, 0, 1, 0, -1, 1, 0, 0): [0, 2, 2, 0, 2, 0, 0, 2, 2],       
    (0, -1, 1, 0, 0, -1, 0, 0, 1): [2, 0, 0, 2, 2, 0, 2, 2, 0],       
    (-1, 0, 0, 1, 0, 0, 1, -1, 0): [0, 2, 2, 0, 2, 2, 0, 0, 2],       
    (-1, 0, -1, 0, 1, 1, 0, 0, 0): [0, 2, 0, 2, 0, 0, 2, 2, 2],       
    (-1, 0, 0, 0, 0, 0, 1, -1, 1): [0, 2, 2, 2, 2, 2, 0, 0, 0],       
    (-1, 0, -1, 0, 0, 1, 0, 1, 0): [0, 2, 0, 2, 2, 0, 2, 0, 2],       
    (-1, 0, 0, 0, -1, 1, 1, 0, 0): [0, 2, 2, 2, 0, 0, 0, 2, 2],       
    (-1, -1, 0, 0, 1, 0, 1, 0, 0): [0, 0, 2, 2, 0, 2, 0, 2, 2],       
    (-1, 0, 0, 1, -1, 1, 0, 0, 0): [0, 2, 2, 0, 0, 0, 2, 2, 2],       
    (0, -1, 0, -1, 0, 1, 1, 0, 0): [2, 0, 2, 0, 2, 0, 0, 2, 2],       
    (0, -1, 0, 0, -1, 1, 0, 0, 1): [2, 0, 2, 2, 0, 0, 2, 2, 0],       
    (-1, 0, 1, 1, 0, 0, 0, -1, 0): [0, 2, 0, 0, 2, 2, 2, 0, 2],       
    (-1, 0, -1, 0, 0, 1, 0, 0, 1): [0, 2, 0, 2, 2, 0, 2, 2, 0],       
    (0, -1, 0, -1, 0, 0, 1, 0, 1): [2, 0, 2, 0, 2, 2, 0, 2, 0],       
    (-1, 0, 0, 1, -1, 0, 1, 0, 0): [0, 2, 2, 0, 0, 2, 0, 2, 2],       
    (0, -1, 0, 0, 1, 0, 0, -1, 1): [2, 0, 2, 2, 0, 2, 2, 0, 0],       
    (0, -1, 0, -1, 1, 0, 0, 1, 0): [2, 0, 2, 0, 0, 2, 2, 0, 2],       
    (-1, 0, 0, 1, 1, -1, 0, 0, 0): [0, 2, 2, 0, 0, 0, 2, 2, 2],       
    (-1, -1, 1, 1, 0, 0, 0, 0, 0): [0, 0, 0, 0, 2, 2, 2, 2, 2],       
    (0, -1, 0, 1, 0, 1, 0, -1, 0): [2, 0, 2, 0, 2, 0, 2, 0, 2],       
    (-1, 0, 0, 1, -1, 0, 0, 1, 0): [0, 2, 2, 0, 0, 2, 2, 0, 2],       
    (-1, 0, 0, 1, 0, -1, 0, 0, 1): [0, 2, 2, 0, 2, 0, 2, 2, 0],       
},
{
    (0, -1, 0, -1, 1, -1, 0, 1, 1): [1, 0, 1, 0, 0, 0, 1, 0, 0],
    (-1, -1, 0, 0, 1, 1, 1, 0, -1): [0, 0, 1, 1, 0, 0, 0, 1, 0],
    (-1, -1, 0, -1, 1, 0, 0, 1, 1): [0, 0, 1, 0, 0, 1, 1, 0, 0],
    (-1, -1, 0, 1, 1, 0, -1, 1, 0): [0, 0, 1, 0, 0, 1, 0, 0, 1],
    (-1, 0, 1, 1, -1, 0, -1, 0, 1): [0, 1, 0, 0, 0, 1, 0, 1, 0],
    (-1, -1, 0, 0, 1, -1, 1, 1, 0): [0, 0, 1, 1, 0, 0, 0, 0, 1],
    (-1, -1, -1, 0, 0, 0, 1, 1, 1): [0, 0, 0, 1, 1, 1, 0, 0, 0],
    (-1, -1, 0, 0, 0, -1, 1, 1, 1): [0, 0, 1, 1, 1, 0, 0, 0, 0],
    (-1, -1, 1, 0, 0, 0, 1, 1, -1): [0, 0, 0, 1, 1, 1, 0, 0, 0],
    (-1, -1, 0, 0, 1, 0, 1, 1, -1): [0, 0, 1, 1, 0, 1, 0, 0, 0],
    (-1, -1, 1, 0, -1, 0, 0, 1, 1): [0, 0, 0, 1, 0, 1, 1, 0, 0],
    (-1, 0, -1, 0, 1, 1, 1, 0, -1): [0, 1, 0, 1, 0, 0, 0, 1, 0],
    (-1, 0, 0, 1, 0, -1, -1, 1, 1): [0, 1, 1, 0, 1, 0, 0, 0, 0],
    (-1, -1, 1, 1, -1, 0, 1, 0, 0): [0, 0, 0, 0, 0, 1, 0, 1, 1],
    (0, -1, 1, 0, -1, 1, 0, -1, 1): [1, 0, 0, 1, 0, 0, 1, 0, 0],      
    (-1, -1, 1, 0, 1, 1, 0, -1, 0): [0, 0, 0, 1, 0, 0, 1, 0, 1],      
    (0, -1, 1, -1, -1, 0, 1, 0, 1): [1, 0, 0, 0, 0, 1, 0, 1, 0],      
    (-1, 0, -1, 0, 1, 1, 0, 1, -1): [0, 1, 0, 1, 0, 0, 1, 0, 0],      
    (-1, -1, 1, -1, 0, 0, 1, 0, 1): [0, 0, 0, 0, 1, 1, 0, 1, 0],      
    (-1, -1, 0, 1, 1, 0, 0, 1, -1): [0, 0, 1, 0, 0, 1, 1, 0, 0],      
    (-1, -1, 0, 0, 1, 0, -1, 1, 1): [0, 0, 1, 1, 0, 1, 0, 0, 0],      
    (-1, -1, 0, -1, 1, 0, 1, 0, 1): [0, 0, 1, 0, 0, 1, 0, 1, 0],      
    (0, -1, 1, 0, -1, 0, 1, -1, 1): [1, 0, 0, 1, 0, 1, 0, 0, 0],      
    (0, -1, 1, 1, -1, 0, 0, -1, 1): [1, 0, 0, 0, 0, 1, 1, 0, 0],      
    (-1, 0, -1, 0, -1, 1, 1, 0, 1): [0, 1, 0, 1, 0, 0, 0, 1, 0],      
    (-1, -1, 0, -1, 0, 1, 1, 0, 1): [0, 0, 1, 0, 1, 0, 0, 1, 0],      
    (-1, -1, 1, 1, 0, 0, 0, 1, -1): [0, 0, 0, 0, 1, 1, 1, 0, 0],      
    (-1, 0, -1, 0, 1, 1, 1, -1, 0): [0, 1, 0, 1, 0, 0, 0, 0, 1],      
    (0, -1, 1, 0, 0, -1, 1, -1, 1): [1, 0, 0, 1, 1, 0, 0, 0, 0],      
    (-1, 1, 0, 1, -1, -1, 1, 0, 0): [0, 0, 1, 0, 0, 0, 0, 1, 1],      
    (-1, 0, 0, 1, -1, 0, -1, 1, 1): [0, 1, 1, 0, 0, 1, 0, 0, 0],      
    (-1, -1, 0, 1, -1, 0, 1, 0, 1): [0, 0, 1, 0, 0, 1, 0, 1, 0],      
    (-1, -1, 1, 0, -1, 0, 1, 1, 0): [0, 0, 0, 1, 0, 1, 0, 0, 1],      
    (-1, 0, 0, 1, -1, 1, 0, -1, 1): [0, 1, 1, 0, 0, 0, 1, 0, 0],      
    (-1, -1, 1, 1, 0, -1, 0, 0, 1): [0, 0, 0, 0, 1, 0, 1, 1, 0],      
    (-1, -1, 0, 1, 1, 1, 0, 0, -1): [0, 0, 1, 0, 0, 0, 1, 1, 0],      
    (0, -1, 0, -1, 0, -1, 1, 1, 1): [1, 0, 1, 0, 1, 0, 0, 0, 0],      
    (-1, 0, -1, 1, 1, 1, 0, -1, 0): [0, 1, 0, 0, 0, 0, 1, 0, 1],      
    (-1, -1, 1, 1, 0, -1, 1, 0, 0): [0, 0, 0, 0, 1, 0, 0, 1, 1],      
    (-1, 0, 0, 1, -1, -1, 1, 1, 0): [0, 1, 1, 0, 0, 0, 0, 0, 1],      
    (-1, -1, 1, 1, 1, 0, 0, -1, 0): [0, 0, 0, 0, 0, 1, 1, 0, 1],      
    (-1, 0, 0, 1, -1, 1, 1, 0, -1): [0, 1, 1, 0, 0, 0, 0, 1, 0],      
    (0, -1, 1, -1, 1, -1, 1, 0, 0): [1, 0, 0, 0, 0, 0, 0, 1, 1],      
    (-1, -1, 0, 1, 1, 0, 0, -1, 1): [0, 0, 1, 0, 0, 1, 1, 0, 0],      
    (-1, -1, 0, 1, 1, -1, 0, 0, 1): [0, 0, 1, 0, 0, 0, 1, 1, 0],      
    (-1, -1, 0, 0, -1, 1, 0, 1, 1): [0, 0, 1, 1, 0, 0, 1, 0, 0],      
    (-1, 0, -1, 1, 0, 1, -1, 1, 0): [0, 1, 0, 0, 1, 0, 0, 0, 1],      
    (-1, -1, -1, 1, 0, 1, 0, 0, 1): [0, 0, 0, 0, 1, 0, 1, 1, 0],      
    (-1, 0, 0, 1, -1, -1, 0, 1, 1): [0, 1, 1, 0, 0, 0, 1, 0, 0],      
    (0, -1, 1, -1, 0, -1, 1, 1, 0): [1, 0, 0, 0, 1, 0, 0, 0, 1],      
    (-1, -1, -1, 0, 1, 1, 0, 0, 1): [0, 0, 0, 1, 0, 0, 1, 1, 0],      
    (-1, 0, -1, 0, 1, 0, 1, -1, 1): [0, 1, 0, 1, 0, 1, 0, 0, 0],      
    (-1, 1, -1, 1, -1, 1, 0, 0, 0): [0, 0, 0, 0, 0, 0, 1, 1, 1],      
    (0, 0, 1, 0, -1, -1, 1, -1, 1): [1, 1, 0, 1, 0, 0, 0, 0, 0],      
    (-1, 0, 0, 1, -1, -1, 1, 0, 1): [0, 1, 1, 0, 0, 0, 0, 1, 0],      
    (-1, -1, 1, 1, 0, 0, 0, -1, 1): [0, 0, 0, 0, 1, 1, 1, 0, 0],      
    (0, -1, 1, 0, -1, -1, 1, 1, 0): [1, 0, 0, 1, 0, 0, 0, 0, 1],      
    (-1, 0, -1, 1, 0, 1, -1, 0, 1): [0, 1, 0, 0, 1, 0, 0, 1, 0],      
    (-1, -1, -1, 0, 1, 0, 0, 1, 1): [0, 0, 0, 1, 0, 1, 1, 0, 0],      
    (-1, -1, 0, 1, 1, 1, -1, 0, 0): [0, 0, 1, 0, 0, 0, 0, 1, 1],      
    (-1, -1, 0, 1, 0, 1, -1, 1, 0): [0, 0, 1, 0, 1, 0, 0, 0, 1],      
    (-1, -1, 1, 0, -1, 1, 1, 0, 0): [0, 0, 0, 1, 0, 0, 0, 1, 1],      
    (-1, -1, 1, 1, 0, 1, -1, 0, 0): [0, 0, 0, 0, 1, 0, 0, 1, 1],      
    (0, -1, 1, -1, 0, -1, 1, 0, 1): [1, 0, 0, 0, 1, 0, 0, 1, 0],      
    (-1, -1, 1, 1, 0, 1, 0, -1, 0): [0, 0, 0, 0, 1, 0, 1, 0, 1],      
    (-1, 1, 0, 1, 1, -1, 0, -1, 0): [0, 0, 1, 0, 0, 0, 1, 0, 1],      
    (-1, -1, 0, 1, -1, 0, 0, 1, 1): [0, 0, 1, 0, 0, 1, 1, 0, 0],      
    (0, -1, 1, 0, -1, -1, 1, 0, 1): [1, 0, 0, 1, 0, 0, 0, 1, 0],      
    (-1, -1, -1, 0, 1, 1, 1, 0, 0): [0, 0, 0, 1, 0, 0, 0, 1, 1],      
    (-1, 0, 1, 1, 0, -1, 1, -1, 0): [0, 1, 0, 0, 1, 0, 0, 0, 1],      
    (-1, -1, 0, 1, 0, 1, 0, -1, 1): [0, 0, 1, 0, 1, 0, 1, 0, 0],      
    (-1, 0, -1, 1, 1, 1, -1, 0, 0): [0, 1, 0, 0, 0, 0, 0, 1, 1],      
    (-1, -1, 0, 0, 0, 1, -1, 1, 1): [0, 0, 1, 1, 1, 0, 0, 0, 0],      
    (0, -1, 1, -1, -1, 0, 1, 1, 0): [1, 0, 0, 0, 0, 1, 0, 0, 1],      
    (-1, -1, 0, 1, 1, 0, -1, 0, 1): [0, 0, 1, 0, 0, 1, 0, 1, 0],      
    (-1, 0, 0, 0, -1, 1, 1, 1, -1): [0, 1, 1, 1, 0, 0, 0, 0, 0],      
    (-1, 1, 0, 1, 0, -1, 1, -1, 0): [0, 0, 1, 0, 1, 0, 0, 0, 1],      
    (-1, 0, 1, 0, 0, -1, 1, -1, 1): [0, 1, 0, 1, 1, 0, 0, 0, 0],      
    (-1, -1, 0, -1, 0, 1, 0, 1, 1): [0, 0, 1, 0, 1, 0, 1, 0, 0],      
    (0, -1, 0, -1, 1, -1, 1, 0, 1): [1, 0, 1, 0, 0, 0, 0, 1, 0],      
    (-1, -1, 0, -1, 1, 0, 1, 1, 0): [0, 0, 1, 0, 0, 1, 0, 0, 1],      
    (-1, -1, 1, 1, 0, 0, -1, 0, 1): [0, 0, 0, 0, 1, 1, 0, 1, 0],      
    (0, -1, 0, -1, 1, 0, 1, -1, 1): [1, 0, 1, 0, 0, 1, 0, 0, 0],      
    (-1, -1, 0, 0, 1, 1, 1, -1, 0): [0, 0, 1, 1, 0, 0, 0, 0, 1],      
    (-1, -1, 1, 0, 0, 1, 1, 0, -1): [0, 0, 0, 1, 1, 0, 0, 1, 0],      
    (-1, -1, 0, 0, 0, 1, 1, 1, -1): [0, 0, 1, 1, 1, 0, 0, 0, 0],      
    (-1, 0, 0, 0, -1, -1, 1, 1, 1): [0, 1, 1, 1, 0, 0, 0, 0, 0],      
    (-1, 0, 0, 1, 0, -1, 1, -1, 1): [0, 1, 1, 0, 1, 0, 0, 0, 0],      
    (-1, -1, 1, 0, 0, 0, -1, 1, 1): [0, 0, 0, 1, 1, 1, 0, 0, 0],      
    (-1, -1, 1, 0, 0, -1, 0, 1, 1): [0, 0, 0, 1, 1, 0, 1, 0, 0],      
    (-1, -1, 0, 1, -1, 0, 1, 1, 0): [0, 0, 1, 0, 0, 1, 0, 0, 1],      
    (-1, 0, 0, 1, -1, 0, 1, 1, -1): [0, 1, 1, 0, 0, 1, 0, 0, 0],      
    (-1, -1, 0, -1, 1, 1, 1, 0, 0): [0, 0, 1, 0, 0, 0, 0, 1, 1],      
    (0, -1, 0, -1, -1, 1, 0, 1, 1): [1, 0, 1, 0, 0, 0, 1, 0, 0],      
    (-1, 0, 1, 1, -1, -1, 0, 0, 1): [0, 1, 0, 0, 0, 0, 1, 1, 0],      
    (-1, -1, 1, 0, 0, 1, 1, -1, 0): [0, 0, 0, 1, 1, 0, 0, 0, 1],      
    (-1, -1, 1, 1, -1, 0, 0, 0, 1): [0, 0, 0, 0, 0, 1, 1, 1, 0],      
    (-1, 0, -1, 1, 0, 1, 0, -1, 1): [0, 1, 0, 0, 1, 0, 1, 0, 0],      
    (-1, -1, 1, 1, 1, 0, -1, 0, 0): [0, 0, 0, 0, 0, 1, 0, 1, 1],      
    (-1, -1, 1, 0, 0, 0, 1, -1, 1): [0, 0, 0, 1, 1, 1, 0, 0, 0],      
    (-1, -1, 0, 0, 1, 0, 1, -1, 1): [0, 0, 1, 1, 0, 1, 0, 0, 0],      
    (-1, -1, 0, 1, 1, -1, 0, 1, 0): [0, 0, 1, 0, 0, 0, 1, 0, 1],      
    (-1, -1, 0, 1, -1, 1, 1, 0, 0): [0, 0, 1, 0, 0, 0, 0, 1, 1],      
    (-1, 0, 0, 1, 0, 1, -1, 1, -1): [0, 1, 1, 0, 1, 0, 0, 0, 0],      
    (-1, 1, 0, 1, -1, 0, 1, -1, 0): [0, 0, 1, 0, 0, 1, 0, 0, 1],      
    (0, -1, 1, 0, 1, -1, 0, -1, 1): [1, 0, 0, 1, 0, 0, 1, 0, 0],      
    (-1, -1, -1, 1, 0, 1, 0, 1, 0): [0, 0, 0, 0, 1, 0, 1, 0, 1],      
    (-1, 0, -1, 1, -1, 1, 0, 1, 0): [0, 1, 0, 0, 0, 0, 1, 0, 1],      
    (-1, -1, 1, 0, -1, 1, 0, 1, 0): [0, 0, 0, 1, 0, 0, 1, 0, 1],      
    (-1, -1, 1, 1, 0, 1, 0, 0, -1): [0, 0, 0, 0, 1, 0, 1, 1, 0],      
    (-1, 0, -1, 0, 0, 1, 1, 1, -1): [0, 1, 0, 1, 1, 0, 0, 0, 0],      
    (0, -1, 0, -1, 0, 1, 1, -1, 1): [1, 0, 1, 0, 1, 0, 0, 0, 0],      
    (-1, 0, -1, 0, -1, 0, 1, 1, 1): [0, 1, 0, 1, 0, 1, 0, 0, 0],      
    (-1, -1, 1, 0, 1, 0, 0, 1, -1): [0, 0, 0, 1, 0, 1, 1, 0, 0],      
    (-1, 0, 1, 1, 1, -1, 0, -1, 0): [0, 1, 0, 0, 0, 0, 1, 0, 1],      
    (-1, 0, 0, 1, -1, 0, 1, -1, 1): [0, 1, 1, 0, 0, 1, 0, 0, 0],      
    (-1, 0, 0, 1, -1, 1, -1, 0, 1): [0, 1, 1, 0, 0, 0, 0, 1, 0],      
    (-1, -1, 0, 1, 0, -1, 1, 1, 0): [0, 0, 1, 0, 1, 0, 0, 0, 1],      
    (-1, 0, 0, 1, -1, 1, -1, 1, 0): [0, 1, 1, 0, 0, 0, 0, 0, 1],      
    (-1, -1, 0, 1, 1, 1, 0, -1, 0): [0, 0, 1, 0, 0, 0, 1, 0, 1],      
    (-1, 0, -1, 1, -1, 1, 0, 0, 1): [0, 1, 0, 0, 0, 0, 1, 1, 0],      
    (-1, -1, 1, 0, 0, 1, -1, 1, 0): [0, 0, 0, 1, 1, 0, 0, 0, 1],      
    (-1, 0, 1, 0, 1, -1, 1, -1, 0): [0, 1, 0, 1, 0, 0, 0, 0, 1],      
    (-1, -1, 0, 1, 0, 0, 1, 1, -1): [0, 0, 1, 0, 1, 1, 0, 0, 0],      
    (-1, -1, 0, 0, -1, 0, 1, 1, 1): [0, 0, 1, 1, 0, 1, 0, 0, 0],
    (-1, -1, 0, 0, 1, 1, 0, 1, -1): [0, 0, 1, 1, 0, 0, 1, 0, 0],      
    (-1, 0, 1, 1, 0, 0, -1, 1, -1): [0, 1, 0, 0, 1, 1, 0, 0, 0],      
    (-1, -1, 0, 1, 0, -1, 1, 0, 1): [0, 0, 1, 0, 1, 0, 0, 1, 0],      
    (-1, 0, 0, 1, -1, 1, 1, -1, 0): [0, 1, 1, 0, 0, 0, 0, 0, 1],      
    (-1, 0, -1, 0, 0, 1, 1, -1, 1): [0, 1, 0, 1, 1, 0, 0, 0, 0],      
    (-1, -1, 1, 0, 1, -1, 0, 1, 0): [0, 0, 0, 1, 0, 0, 1, 0, 1],      
    (-1, -1, 1, 1, 0, 0, 1, 0, -1): [0, 0, 0, 0, 1, 1, 0, 1, 0],      
    (-1, -1, 0, 0, 1, -1, 0, 1, 1): [0, 0, 1, 1, 0, 0, 1, 0, 0],      
    (-1, -1, 1, 0, 0, 1, 0, 1, -1): [0, 0, 0, 1, 1, 0, 1, 0, 0],      
    (-1, 0, 0, 1, 1, -1, -1, 1, 0): [0, 1, 1, 0, 0, 0, 0, 0, 1],      
    (-1, -1, 1, 1, 0, 0, -1, 1, 0): [0, 0, 0, 0, 1, 1, 0, 0, 1],      
    (-1, -1, 1, 1, 0, 0, 1, -1, 0): [0, 0, 0, 0, 1, 1, 0, 0, 1],      
    (-1, 0, -1, 0, 1, 0, -1, 1, 1): [0, 1, 0, 1, 0, 1, 0, 0, 0],      
    (-1, 0, 1, 1, -1, 0, 0, 1, -1): [0, 1, 0, 0, 0, 1, 1, 0, 0],      
    (-1, -1, -1, 0, 1, 0, 1, 0, 1): [0, 0, 0, 1, 0, 1, 0, 1, 0],      
    (-1, 0, 1, 1, -1, 0, 1, -1, 0): [0, 1, 0, 0, 0, 1, 0, 0, 1],      
    (-1, 0, 0, 1, 1, -1, -1, 0, 1): [0, 1, 1, 0, 0, 0, 0, 1, 0],      
    (-1, -1, 1, 0, 1, 0, -1, 1, 0): [0, 0, 0, 1, 0, 1, 0, 0, 1],      
    (-1, 0, -1, 0, -1, 1, 0, 1, 1): [0, 1, 0, 1, 0, 0, 1, 0, 0],      
    (-1, 0, 1, 1, -1, -1, 0, 1, 0): [0, 1, 0, 0, 0, 0, 1, 0, 1],      
    (-1, 1, 0, 1, -1, -1, 0, 1, 0): [0, 0, 1, 0, 0, 0, 1, 0, 1],      
    (-1, 0, 1, 1, -1, 0, 0, -1, 1): [0, 1, 0, 0, 0, 1, 1, 0, 0],      
    (-1, -1, 0, 1, 0, -1, 0, 1, 1): [0, 0, 1, 0, 1, 0, 1, 0, 0],      
    (-1, -1, 0, 1, 1, 0, 1, 0, -1): [0, 0, 1, 0, 0, 1, 0, 1, 0],      
    (-1, -1, 1, 1, -1, 0, 0, 1, 0): [0, 0, 0, 0, 0, 1, 1, 0, 1],      
    (-1, 1, -1, 1, 0, 1, 0, -1, 0): [0, 0, 0, 0, 1, 0, 1, 0, 1],      
    (-1, -1, 0, 1, -1, 1, 0, 1, 0): [0, 0, 1, 0, 0, 0, 1, 0, 1],      
    (-1, 0, 1, 1, 0, -1, -1, 1, 0): [0, 1, 0, 0, 1, 0, 0, 0, 1],      
    (-1, -1, 0, 0, 1, 1, -1, 1, 0): [0, 0, 1, 1, 0, 0, 0, 0, 1],      
    (-1, 1, 0, 1, -1, -1, 0, 0, 1): [0, 0, 1, 0, 0, 0, 1, 1, 0],      
    (-1, 0, -1, 0, 1, 1, 0, -1, 1): [0, 1, 0, 1, 0, 0, 1, 0, 0],      
    (-1, -1, 1, 0, 1, -1, 1, 0, 0): [0, 0, 0, 1, 0, 0, 0, 1, 1],      
    (-1, -1, 0, 1, 1, -1, 1, 0, 0): [0, 0, 1, 0, 0, 0, 0, 1, 1],      
    (-1, 0, 0, 0, -1, 1, 1, -1, 1): [0, 1, 1, 1, 0, 0, 0, 0, 0],      
    (0, -1, 0, 0, -1, 1, 1, -1, 1): [1, 0, 1, 1, 0, 0, 0, 0, 0],      
    (-1, -1, -1, 0, 0, 1, 1, 1, 0): [0, 0, 0, 1, 1, 0, 0, 0, 1],      
    (-1, 0, 1, 1, 0, -1, -1, 0, 1): [0, 1, 0, 0, 1, 0, 0, 1, 0],      
    (-1, -1, 0, 0, 1, 1, -1, 0, 1): [0, 0, 1, 1, 0, 0, 0, 1, 0],      
    (-1, -1, 0, 1, 0, 1, 0, 1, -1): [0, 0, 1, 0, 1, 0, 1, 0, 0],      
    (-1, 0, 1, 0, -1, -1, 1, 0, 1): [0, 1, 0, 1, 0, 0, 0, 1, 0],      
    (-1, 0, 0, 1, 1, 0, -1, 1, -1): [0, 1, 1, 0, 0, 1, 0, 0, 0],      
    (-1, -1, -1, 0, 0, 1, 0, 1, 1): [0, 0, 0, 1, 1, 0, 1, 0, 0],      
    (-1, -1, 1, 1, -1, 1, 0, 0, 0): [0, 0, 0, 0, 0, 0, 1, 1, 1],      
    (-1, -1, 0, 0, 0, 1, 1, -1, 1): [0, 0, 1, 1, 1, 0, 0, 0, 0],      
    (-1, -1, 0, 1, 0, 1, 1, 0, -1): [0, 0, 1, 0, 1, 0, 0, 1, 0],      
    (0, -1, 0, -1, -1, 1, 1, 1, 0): [1, 0, 1, 0, 0, 0, 0, 0, 1],      
    (0, -1, 0, -1, -1, 1, 1, 0, 1): [1, 0, 1, 0, 0, 0, 0, 1, 0],      
    (-1, -1, -1, 0, 0, 1, 1, 0, 1): [0, 0, 0, 1, 1, 0, 0, 1, 0],      
    (0, -1, 0, -1, 1, 1, 1, -1, 0): [1, 0, 1, 0, 0, 0, 0, 0, 1],      
    (0, -1, 1, 1, -1, -1, 0, 1, 0): [1, 0, 0, 0, 0, 0, 1, 0, 1],      
    (-1, 0, 1, 1, -1, -1, 1, 0, 0): [0, 1, 0, 0, 0, 0, 0, 1, 1],      
    (-1, -1, 1, 0, 0, 1, -1, 0, 1): [0, 0, 0, 1, 1, 0, 0, 1, 0],      
    (-1, -1, 1, 0, 1, 1, 0, 0, -1): [0, 0, 0, 1, 0, 0, 1, 1, 0],      
    (-1, -1, 1, -1, 1, 0, 1, 0, 0): [0, 0, 0, 0, 0, 1, 0, 1, 1],      
    (-1, 1, 0, 1, 0, -1, 0, -1, 1): [0, 0, 1, 0, 1, 0, 1, 0, 0],      
    (-1, 0, 1, 1, -1, 0, -1, 1, 0): [0, 1, 0, 0, 0, 1, 0, 0, 1],      
    (-1, 0, 0, 1, 1, -1, 0, -1, 1): [0, 1, 1, 0, 0, 0, 1, 0, 0],      
    (-1, -1, 1, 0, -1, 1, 0, 0, 1): [0, 0, 0, 1, 0, 0, 1, 1, 0],      
    (-1, -1, 0, 0, -1, 1, 1, 1, 0): [0, 0, 1, 1, 0, 0, 0, 0, 1],      
    (-1, -1, 0, 1, 0, 1, 1, -1, 0): [0, 0, 1, 0, 1, 0, 0, 0, 1],      
    (-1, -1, 1, -1, 0, 0, 1, 1, 0): [0, 0, 0, 0, 1, 1, 0, 0, 1],      
    (0, -1, 1, 1, -1, -1, 0, 0, 1): [1, 0, 0, 0, 0, 0, 1, 1, 0],      
    (-1, 0, 0, 1, -1, 1, 0, 1, -1): [0, 1, 1, 0, 0, 0, 1, 0, 0],      
    (-1, -1, 0, 1, 0, 1, -1, 0, 1): [0, 0, 1, 0, 1, 0, 0, 1, 0],      
    (-1, -1, 1, 0, 1, -1, 0, 0, 1): [0, 0, 0, 1, 0, 0, 1, 1, 0],      
    (-1, -1, 0, 0, 1, -1, 1, 0, 1): [0, 0, 1, 1, 0, 0, 0, 1, 0],      
    (-1, -1, 0, -1, 0, 1, 1, 1, 0): [0, 0, 1, 0, 1, 0, 0, 0, 1],      
    (-1, -1, 0, 0, -1, 1, 1, 0, 1): [0, 0, 1, 1, 0, 0, 0, 1, 0],      
    (-1, -1, 1, 0, 1, 0, 0, -1, 1): [0, 0, 0, 1, 0, 1, 1, 0, 0],      
    (-1, -1, 0, 1, 0, 0, -1, 1, 1): [0, 0, 1, 0, 1, 1, 0, 0, 0],      
    (0, -1, 0, 1, -1, 1, 0, -1, 1): [1, 0, 1, 0, 0, 0, 1, 0, 0],      
    (-1, 0, 0, 0, 1, -1, 1, -1, 1): [0, 1, 1, 1, 0, 0, 0, 0, 0],      
    (-1, -1, 1, 1, 0, -1, 0, 1, 0): [0, 0, 0, 0, 1, 0, 1, 0, 1],      
    (-1, -1, 1, 1, 1, -1, 0, 0, 0): [0, 0, 0, 0, 0, 0, 1, 1, 1],      
    (-1, -1, 0, -1, 0, 0, 1, 1, 1): [0, 0, 1, 0, 1, 1, 0, 0, 0],      
    (-1, 0, -1, 0, 1, 1, -1, 1, 0): [0, 1, 0, 1, 0, 0, 0, 0, 1],      
    (-1, 0, -1, 0, 0, 1, -1, 1, 1): [0, 1, 0, 1, 1, 0, 0, 0, 0],      
    (0, -1, 1, 0, -1, 1, 1, -1, 0): [1, 0, 0, 1, 0, 0, 0, 0, 1],      
    (-1, -1, 1, 0, 0, -1, 1, 0, 1): [0, 0, 0, 1, 1, 0, 0, 1, 0],      
    (-1, -1, 1, 0, 0, -1, 1, 1, 0): [0, 0, 0, 1, 1, 0, 0, 0, 1],      
    (-1, -1, 1, 1, 1, 0, 0, 0, -1): [0, 0, 0, 0, 0, 1, 1, 1, 0],      
    (0, -1, 1, 1, 0, -1, 0, -1, 1): [1, 0, 0, 0, 1, 0, 1, 0, 0],      
    (-1, -1, 0, 1, 0, 0, 1, -1, 1): [0, 0, 1, 0, 1, 1, 0, 0, 0],      
    (-1, 0, 0, 1, 1, -1, 1, -1, 0): [0, 1, 1, 0, 0, 0, 0, 0, 1],      
    (-1, -1, 0, 0, 1, 1, 0, -1, 1): [0, 0, 1, 1, 0, 0, 1, 0, 0],      
    (-1, -1, 1, 0, 1, 0, 1, 0, -1): [0, 0, 0, 1, 0, 1, 0, 1, 0],      
    (-1, 0, -1, 0, -1, 1, 1, 1, 0): [0, 1, 0, 1, 0, 0, 0, 0, 1],      
    (0, -1, 1, 0, -1, -1, 0, 1, 1): [1, 0, 0, 1, 0, 0, 1, 0, 0],      
    (-1, -1, -1, 1, 1, 1, 0, 0, 0): [0, 0, 0, 0, 0, 0, 1, 1, 1],      
    (-1, -1, -1, 0, 1, 1, 0, 1, 0): [0, 0, 0, 1, 0, 0, 1, 0, 1],      
    (-1, -1, 1, 0, 0, 1, 0, -1, 1): [0, 0, 0, 1, 1, 0, 1, 0, 0],
    (-1, -1, 1, 0, 1, 1, -1, 0, 0): [0, 0, 0, 1, 0, 0, 0, 1, 1],      
    (-1, -1, 1, 0, 1, 0, 1, -1, 0): [0, 0, 0, 1, 0, 1, 0, 0, 1],      
    (-1, 0, 1, 1, -1, 1, 0, -1, 0): [0, 1, 0, 0, 0, 0, 1, 0, 1],      
    (-1, 0, 1, 0, -1, -1, 1, 1, 0): [0, 1, 0, 1, 0, 0, 0, 0, 1],      
    (-1, -1, 0, 1, -1, 1, 0, 0, 1): [0, 0, 1, 0, 0, 0, 1, 1, 0],      
    (-1, 0, 1, 1, 0, -1, 0, -1, 1): [0, 1, 0, 0, 1, 0, 1, 0, 0],      
    (-1, -1, 1, 0, 1, 0, -1, 0, 1): [0, 0, 0, 1, 0, 1, 0, 1, 0],      
    (-1, -1, 1, 0, -1, 0, 1, 0, 1): [0, 0, 0, 1, 0, 1, 0, 1, 0],      
    (-1, -1, 0, 1, 1, 0, 1, -1, 0): [0, 0, 1, 0, 0, 1, 0, 0, 1],      
    (-1, -1, 0, -1, 1, 1, 0, 1, 0): [0, 0, 1, 0, 0, 0, 1, 0, 1],      
    (-1, 0, 1, 0, -1, 0, 1, 1, -1): [0, 1, 0, 1, 0, 1, 0, 0, 0],      
    (0, -1, 0, -1, -1, 0, 1, 1, 1): [1, 0, 1, 0, 0, 1, 0, 0, 0],      
})
def rotate_indices(indices):
    return [6,3,0,7,4,1,8,5,2]

def reflect_indices(indices):
    return [2,1,0,5,4,3,8,7,6]

def get_canonical_and_mapping(board):
    boards = []
    mappings = []
    idx = list(range(9))
    for _ in range(4):
        boards.append(tuple(board[i] for i in idx))
        mappings.append(list(idx))
        idx = rotate_indices(idx)
    idx = reflect_indices(list(range(9)))
    for _ in range(4):
        boards.append(tuple(board[i] for i in idx))
        mappings.append(list(idx))
        idx = rotate_indices(idx)
    min_board = min(boards)
    min_idx = boards.index(min_board)
    return min_board, mappings[min_idx]
def check_dictionaries(*dicts):
    for d in dicts:
        for board, weights in d.items():
            for i, v in enumerate(board):
                if v != 0 and weights[i] != 0:
                    print(f"ERROR: Board {board} has nonzero weight {weights[i]} at occupied cell {i}")

# Call this once at startup
check_dictionaries(Boards_move1, Boards_move3, Boards_move5, Boards_move7)

def rotate(board):
    # Rotates the board 90 degrees clockwise
    return (
        board[6], board[3], board[0],
        board[7], board[4], board[1],
        board[8], board[5], board[2]
    )

def reflect(board):
    # Reflects the board horizontally
    return (
        board[2], board[1], board[0],
        board[5], board[4], board[3],
        board[8], board[7], board[6]
    )

def canonical(board):
    # Returns the minimal form of the board under all symmetries
    boards = [board]
    b = board
    for _ in range(3):
        b = rotate(b)
        boards.append(b)
    b = reflect(board)
    boards.append(b)
    for _ in range(3):
        b = rotate(b)
        boards.append(b)
    return min(boards)
def test_canonical_mapping():
    test_boards = [
        (0,0,0,0,1,0,0,0,0),  # O in center
        (1,0,0,0,0,0,0,0,0),  # O in top-left
        (0,0,0,0,0,0,0,0,1),  # O in bottom-right
    ]
    for board in test_boards:
        can, mapping = get_canonical_and_mapping(board)
        print("Original:", board)
        print("Canonical:", can)
        print("Mapping:", mapping)
        print()
class MENACE:
    def __init__(self):
        self.moves = []  # Store tuples: (move_number, board_state, move_index)

    def play(self, MoveNumber, board):
        canonical_board, mapping = get_canonical_and_mapping(board)
        empty = [i for i, v in enumerate(canonical_board) if v == 0]
        if len(empty) == 1:
            bestMove_canonical = empty[0]
        else:
            if MoveNumber == 1:
                d = Boards_move1
            elif MoveNumber == 3:
                d = Boards_move3
            elif MoveNumber == 5:
                d = Boards_move5
            elif MoveNumber == 7:
                d = Boards_move7
            else:
                raise ValueError("Invalid MoveNumber")
    
            if canonical_board not in d:
                d[canonical_board] = [3 if v == 0 else 0 for v in canonical_board]
            currentMove = d[canonical_board]
            bestMove_canonical = self.choose_best_move(currentMove, canonical_board)
        bestMove = mapping[bestMove_canonical]
        self.moves.append((MoveNumber, canonical_board, bestMove_canonical))
        return bestMove

    def choose_best_move(self, weights, board):
        for i, (w, v) in enumerate(zip(weights, board)):
            if w > 0 and v != 0:
                print(f"WARNING: Dictionary suggests move to occupied cell {i} (weight={w}, value={v}) for board {board}")
        valid_positions = [i for i, (w, v) in enumerate(zip(weights, board)) if w > 0 and v == 0]
        valid_weights = [weights[i] for i in valid_positions]
        if not valid_positions:
            print(f"ERROR: No valid moves for board {board} with weights {weights}")
            return -1  # No valid moves
        return random.choices(valid_positions, weights=valid_weights, k=1)[0]

    def update(self, result):
        # Update the weights based on the result of the game
        for move_number, board, move_index in self.moves:
            if move_number == 1:
                d = Boards_move1
            elif move_number == 3:
                d = Boards_move3
            elif move_number == 5:
                d = Boards_move5
            elif move_number == 7:
                d = Boards_move7
            else:
                continue

            if board not in d:
                continue  # skip if board state not found

            if result == 1:
                d[board][move_index] += 3
            elif result == -1:
                d[board][move_index] = max(0, d[board][move_index] - 1)  # Clamp to zero
            elif result == 0:
                d[board][move_index] += 1
        self.moves = []  # Clear moves after update
        print(Boards_move1, Boards_move3)


if __name__ == "__main__":
    test_canonical_mapping()